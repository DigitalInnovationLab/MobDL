import os
import sys
import numpy as np
# from PIL import Image, ImageDraw
# import random
# from random import gauss
# import cv2
# import colorsys
import skimage
from keras import backend as K
from tensorflow.python.client import device_lib


ROOT_DIR = os.path.abspath("../../")
# Import mrcnn libraries
sys.path.append(ROOT_DIR)
from mrcnn.config import Config
import mrcnn.utils as utils

from mrcnn.visualize import save_image
import mrcnn.model as modellib


def egg_type_prediction():
	K.clear_session()

	class parasiteConfig(Config):
	    """Configuration for training on the toy  dataset.
	    Derives from the base Config class and overrides some values.
	    """
	    # Give the configuration a recognizable name
	    NAME = "test"
	    GPU_COUNT = 0
	    # We use a GPU with 12GB memory, which can fit two images.
	    # Adjust down if you use a smaller GPU.
	    IMAGES_PER_GPU = 1

	    # Number of classes (including background)
	    NUM_CLASSES = 6  # Background + parasite

	    IMAGE_MIN_DIM = 512
	    IMAGE_MAX_DIM = 512
	    IMAGE_PADDING = True

	    IMAGE_RESIZE_MODE = "square"


	    # Skip detections with < 90% confidence
	    DETECTION_MIN_CONFIDENCE = 0.85


	config = parasiteConfig()


	class InferenceConfig(parasiteConfig):
	    GPU_COUNT = 1
	    IMAGES_PER_GPU = 1
	    IMAGE_MIN_DIM = 512
	    IMAGE_MAX_DIM = 512
	    DETECTION_MIN_CONFIDENCE = 0.0
	    NUM_CLASSES = 1 + 5
	    IMAGE_RESIZE_MODE = "square"


	inference_config2 = InferenceConfig()

	MODEL_DIR = "model_masks/"


	model2 = modellib.MaskRCNN(mode="inference",
	                          config=inference_config2,
	                          model_dir=MODEL_DIR)



	model2.load_weights('/data/user/0/com.example.python_test/files/chaquopy/AssetFinder/app/mask_rcnn_20200709_resnet100_type_1_1_0001.h5', by_name=True)
	model2.keras_model._make_predict_function()


	return model2


def egg_only_prediction():
	K.clear_session()

	class parasiteConfig(Config):
	    """Configuration for training on the toy  dataset.
	    Derives from the base Config class and overrides some values.
	    """
	    # Give the configuration a recognizable name
	    NAME = "test"
	    GPU_COUNT = 1
	    # We use a GPU with 12GB memory, which can fit two images.
	    # Adjust down if you use a smaller GPU.
	    IMAGES_PER_GPU = 2

	    # Number of classes (including background)
	    NUM_CLASSES = 3  # Background + parasite + egg

	    IMAGE_MIN_DIM = 512
	    IMAGE_MAX_DIM = 512
	    IMAGE_PADDING = True

	    IMAGE_RESIZE_MODE = "square"


	    # Skip detections with < 90% confidence
	    DETECTION_MIN_CONFIDENCE = 0.85


	config = parasiteConfig()


	class InferenceConfig(parasiteConfig):
	    GPU_COUNT = 1
	    IMAGES_PER_GPU = 1
	    IMAGE_MIN_DIM = 512
	    IMAGE_MAX_DIM = 512
	    DETECTION_MIN_CONFIDENCE = 0.0
	    NUM_CLASSES = 1 + 2
	    IMAGE_RESIZE_MODE = "square"


	inference_config = InferenceConfig()

	MODEL_DIR = "model_masks/"


	model = modellib.MaskRCNN(mode="inference",
	                          config=inference_config,
	                          model_dir=MODEL_DIR)



	model.load_weights('/data/user/0/com.example.python_test/files/chaquopy/AssetFinder/app/egg_model.h5', by_name=True)
	model.keras_model._make_predict_function()


	return model

def check_egg_type(model_egg_type,r, image_height,image_width,img,bbox):
	for i in range(len(r)):
		if r[i] == 1:
			box = get_crop(bbox[i],1024,image_height,image_width)
			x1,x2,y1,y2 = box
			crop_img = img[y1:y2, x1:x2]
			crop_img_arr = np.array(crop_img)
			type_results = model_egg_type.detect([crop_img_arr], verbose=1)
			tr = type_results[0]
			r[i] = tr['class_ids'][0]

		else:
			r[i] = 6

	return r


def image_prediction(model_egg_only,image_path):


	local_device_protos = device_lib.list_local_devices()
	print([x.name for x in local_device_protos if x.device_type == 'GPU'])
	# save_image_dir = os.path.dirname(image_path)
	save_image_dir = "/data/user/0/com.example.python_test/files/chaquopy/AssetFinder/app"
	K.clear_session()
	img = skimage.io.imread(image_path)
	img_arr = np.array(img)
	image_height,image_width,_ = img.shape
	results = model_egg_only.detect([img_arr], verbose=0)
	r = results[0]

	file_name = "test"

	class_egg_only = ['BG','egg','noise']


	# r['class_ids'] = check_egg_type(model_egg_type,r['class_ids'], image_height,image_width,img,r['rois'])

	class_names = ['BG','Haemonchus','Trichostrongylus','Nematodirus','Ostertagia','Moniezia','Noise']
	save_image(img, file_name, r['rois'], r['masks'], r['class_ids'], r['scores'], class_names, filter_classs_names=None,
				scores_thresh=0.1, save_dir=save_image_dir, mode=0)

	final ={"path" : os.path.join(save_image_dir,"{}.jpg".format(file_name)),"name" : r['class_ids'],"scores" : r['scores']}

	return final

def check22():
	print("Worked")

	return "python stringgg"




